/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Bar, BarInterface } from "../Bar";

const _abi = [
  {
    inputs: [],
    name: "initialized",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "state",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "unlockTime",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061010b806100206000396000f3fe60806040526004361060305760003560e01c8063158ef93e146035578063251c1aa3146062578063c19d93fb146083575b600080fd5b348015604057600080fd5b50600154604d9060ff1681565b60405190151581526020015b60405180910390f35b348015606d57600080fd5b50607660005481565b6040519081526020016059565b607660008054609290600a6097565b905090565b6000821982111560d0577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50019056fea2646970667358221220bd10ce6117dda4ffd5f1eac1ea0352563425a59024ea1a77ebf726351765805964736f6c634300080a0033";

type BarConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BarConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Bar__factory extends ContractFactory {
  constructor(...args: BarConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Bar> {
    return super.deploy(overrides || {}) as Promise<Bar>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Bar {
    return super.attach(address) as Bar;
  }
  override connect(signer: Signer): Bar__factory {
    return super.connect(signer) as Bar__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BarInterface {
    return new utils.Interface(_abi) as BarInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Bar {
    return new Contract(address, _abi, signerOrProvider) as Bar;
  }
}
